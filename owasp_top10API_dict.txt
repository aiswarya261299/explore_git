{"Broken Object Level Authorization":""" APIs that expose endpoints that handle object identifiers may create a wide attack surface for attackers to exploit. Object level authorization checks should be considered in every function that accesses a data source using an input from the user. Without proper object-level authorization checks, attackers can bypass the intended access controls and access or modify data they should not be allowed to.

Example: An attacker sends a request to an API endpoint that retrieves user profile information by supplying a user ID in the request URL. However, the API does not perform proper authorization checks to ensure that the authenticated user has permission to access the requested user's profile. As a result, the attacker can access and retrieve the private profile information of other users.""",
                  "Broken User Authentication":""" Authentication mechanisms are often implemented incorrectly, allowing attackers to compromise authentication tokens or to exploit implementation flaws to assume other user's identities temporarily or permanently. Compromising a system's ability to identify the client/user compromises API security overall. Proper implementation of user authentication measures, such as strong password policies, multi-factor authentication, and secure token handling, can help prevent these attacks.
                  
Example: An API implements an authentication mechanism that uses session tokens to identify and authenticate users. However, the API fails to properly validate and secure these tokens, allowing an attacker to steal a valid token and use it to impersonate the authenticated user and perform unauthorized actions.""",
                  "Excessive Data Exposure":""" Developers often expose all object properties without considering their individual sensitivity, relying on clients to perform the data filtering before displaying it to the user. Attackers can exploit this vulnerability by accessing sensitive data through unauthorized endpoints, bypassing proper authentication and authorization controls. Developers should consider the sensitivity of each object property and restrict access accordingly.
                  
Example: An API exposes sensitive data, such as a user's social security number, in its responses without proper data filtering or masking. This could allow an attacker to easily access and obtain this sensitive data.""",
                  "Lack of Resources & Rate Limiting":"""APIs often do not impose any restrictions on the size or number of resources that can be requested by the client/user. This can lead to performance issues, such as Denial of Service (DoS), and also leave the door open to authentication flaws such as brute force attacks. Properly implemented resource and rate limiting can help prevent these attacks.
                  
Example: An API does not enforce any limits on the number of requests a user can make, allowing an attacker to launch a brute force attack against an authentication endpoint to guess valid login credentials.""",
                  "Broken Function Level Authorization":"""Complex access control policies with different hierarchies, groups, and roles, and an unclear separation between administrative and regular functions, tend to lead to authorization flaws. By exploiting these issues, attackers gain access to other users' resources and/or administrative functions. Developers should consider separating administrative functions from regular functions and implementing appropriate access controls.
                  
Example: An API endpoint is supposed to be accessible only to administrators, but due to a flaw in the access control logic, regular users are able to access and modify sensitive data through this endpoint.""",
                  "Mass Assignment":"""Binding client provided data (e.g., JSON) to data models without proper properties filtering based on an allowlist usually leads to Mass Assignment. Attackers can modify object properties they are not supposed to by guessing objects properties, exploring other API endpoints, reading the documentation, or providing additional object properties in request payloads. Developers should validate user input and filter out any unnecessary data before processing it.
                  
Example: An API endpoint accepts user input as JSON and directly maps the input to an object without validating or sanitizing the input. An attacker can then supply additional properties in the JSON payload that the API will accept and use to modify the object's properties, allowing the attacker to modify sensitive data or perform unauthorized actions.""",
                  "Security Misconfiguration":"""Security misconfiguration is commonly a result of unsecure default configurations, incomplete or ad-hoc configurations, open cloud storage, misconfigured HTTP headers, unnecessary HTTP methods, permissive Cross-Origin resource sharing (CORS), and verbose error messages containing sensitive information. Properly configured security settings can help prevent these types of attacks.
                  
Example: An API has an unsecured default configuration that allows an attacker to bypass authentication checks and gain access to sensitive data or functionality.""",
                  "Injection":"""Injection flaws occur when untrusted data is sent to an interpreter as part of a command or query. Attackers can exploit these vulnerabilities by tricking the interpreter into executing unintended commands or accessing data without proper authorization. Developers should use parameterized queries and input validation to prevent injection attacks.
                  
Example: An API endpoint uses unvalidated user input to construct a SQL query that is sent to a database server. An attacker can supply malicious input that causes the database server to execute unintended SQL commands, such as deleting or modifying data.""",
                  "Improper Assets Management":"""APIs tend to expose more endpoints than traditional web applications, making proper and updated documentation highly important. Proper hosts and deployed API versions inventory also play an important role in mitigating issues such as deprecated API versions and exposed debug endpoints. Properly managed assets can help prevent these types of attacks.
                  
Example: An API has outdated or deprecated endpoints that are no longer in use, but are still accessible and contain sensitive data or functionality that can be exploited by an attacker.""",
                  "Insufficient Logging & Monitoring":"""This vulnerability occurs when APIs do not log enough information about user activity or do not monitor user activity for suspicious behavior. Without proper logging and monitoring, it is difficult to detect and respond to security breaches in a timely manner, which can result in sensitive data being compromised.
                  
Example: An API does not log important security events or activities, such as failed login attempts or unauthorized access attempts. This makes it difficult to detect and respond to security incidents in a timely manner, allowing an attacker to maintain persistence and further compromise the system."""
                 }